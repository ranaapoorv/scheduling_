#include <stdio.h>
int main()
{
int bt[20], at[20], p[20], wt[20], tat[20], i, j, n, total = 0;
float avg_wt, avg_tat;
printf("Enter the Total Number of Processes: ");
scanf("%d", &n);
printf("\nEnter Burst Time and Arrival Time for each Process:\n");
for (i = 0; i < n; i++)
{
printf("\nP[%d]\n", i + 1);
printf("Burst Time: ");
scanf("%d", &bt[i]);
printf("Arrival Time: ");
scanf("%d", &at[i]);
p[i] = i + 1; // contains process number
}
// Sorting processes based on arrival time using insertion sort
for (i = 1; i < n; i++)
{
int key = at[i];
int burst = bt[i];
int process = p[i];
j = i - 1;
while (j >= 0 && at[j] > key)
{
at[j + 1] = at[j];
bt[j + 1] = bt[j];
p[j + 1] = p[j];
j--;
}
at[j + 1] = key;
bt[j + 1] = burst;
p[j + 1] = process;
}
wt[0] = 0; // waiting time for the first process is zero
// calculate waiting time and turnaround time
for (i = 1; i < n; i++)
{
wt[i] = 0;
for (j = 0; j < i; j++)
wt[i] += bt[j];
total += wt[i];
}
avg_wt = (float)total / n; // average waiting time
total = 0;
printf("\nGantt Chart:\n");
printf(" ");
for (i = 0; i < n; i++)
printf("| P[%d] ", p[i]);
printf("|\n");
printf(" ");
int completionTime = 0;
for (i = 0; i < n; i++)
{
printf("%d ", completionTime);
completionTime += bt[i];
}
printf("%d\n", completionTime);
printf("\nProcess\t\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
for (i = 0; i < n; i++)
{
tat[i] = bt[i] + wt[i]; // calculate turnaround time
total += tat[i];
printf("P[%d]\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i], bt[i], at[i], wt[i], tat[i]);
}
avg_tat = (float)total / n; // average turnaround time
printf("\nAverage Waiting Time: %.2f\n", avg_wt);
printf("Average Turnaround Time: %.2f\n", avg_tat);
return 0;
}
